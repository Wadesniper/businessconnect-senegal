{"ast":null,"code":"import { __assign, __extends, __read, __spreadArray } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport Action from '../../base';\n/**\n * @ignore\n * 辅助框 Action 的基类\n */\nvar MultipleMaskBase = /** @class */function (_super) {\n  __extends(MultipleMaskBase, _super);\n  function MultipleMaskBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    // mask 图形\n    _this.maskShapes = [];\n    // 开始 mask 的标记\n    _this.starting = false;\n    // 开始移动的标记\n    _this.moving = false;\n    // 记录 mask 节点\n    _this.recordPoints = null;\n    _this.preMovePoint = null;\n    _this.shapeType = 'path';\n    _this.maskType = 'multi-mask';\n    return _this;\n  }\n  /**\n   * 获取当前的位置\n   */\n  MultipleMaskBase.prototype.getCurrentPoint = function () {\n    var event = this.context.event;\n    return {\n      x: event.x,\n      y: event.y\n    };\n  };\n  /**\n   * 触发 mask 的事件\n   * @param type\n   */\n  MultipleMaskBase.prototype.emitEvent = function (type) {\n    var eventName = \"\".concat(this.maskType, \":\").concat(type);\n    var view = this.context.view;\n    var event = this.context.event;\n    var target = {\n      type: this.shapeType,\n      name: this.maskType,\n      get: function (key) {\n        return target.hasOwnProperty(key) ? target[key] : undefined;\n      }\n    };\n    view.emit(eventName, {\n      target: target,\n      maskShapes: this.maskShapes,\n      multiPoints: this.recordPoints,\n      x: event.x,\n      y: event.y\n    });\n  };\n  /**\n   * 创建 mask\n   * @param index\n   */\n  MultipleMaskBase.prototype.createMask = function (index) {\n    var view = this.context.view;\n    var points = this.recordPoints[index];\n    var maskAttrs = this.getMaskAttrs(points);\n    var maskShape = view.foregroundGroup.addShape({\n      type: this.shapeType,\n      name: 'mask',\n      draggable: true,\n      attrs: __assign({\n        fill: '#C5D4EB',\n        opacity: 0.3\n      }, maskAttrs)\n    });\n    this.maskShapes.push(maskShape);\n  };\n  /**\n   * 生成 mask 的路径\n   */\n  MultipleMaskBase.prototype.getMaskPath = function (points) {\n    return [];\n  };\n  /**\n   * 显示\n   */\n  MultipleMaskBase.prototype.show = function () {\n    if (this.maskShapes.length > 0) {\n      this.maskShapes.forEach(function (maskShape) {\n        return maskShape.show();\n      });\n      this.emitEvent('show');\n    }\n  };\n  /**\n   * 开始\n   */\n  MultipleMaskBase.prototype.start = function (arg) {\n    this.recordPointStart();\n    this.starting = true;\n    // 开始时，保证移动结束\n    this.moving = false;\n    // 开始第 index 个 mask\n    var index = this.recordPoints.length - 1;\n    this.createMask(index);\n    // 开始时设置 capture: false，可以避免创建、resize 时触发事件\n    this.updateShapesCapture(false);\n    this.updateMask(arg === null || arg === void 0 ? void 0 : arg.maskStyle);\n    this.emitEvent('start');\n  };\n  /**\n   * 开始移动\n   */\n  MultipleMaskBase.prototype.moveStart = function () {\n    this.moving = true;\n    this.preMovePoint = this.getCurrentPoint();\n    this.updateShapesCapture(false);\n  };\n  /**\n   * 移动 mask\n   */\n  MultipleMaskBase.prototype.move = function () {\n    if (!this.moving || this.maskShapes.length === 0) {\n      return;\n    }\n    var currentPoint = this.getCurrentPoint();\n    var preMovePoint = this.preMovePoint;\n    var dx = currentPoint.x - preMovePoint.x;\n    var dy = currentPoint.y - preMovePoint.y;\n    // 只移动当前 event (x, y) 所在的某个 mask\n    var index = this.getCurMaskShapeIndex();\n    if (index > -1) {\n      this.recordPoints[index].forEach(function (point) {\n        point.x += dx;\n        point.y += dy;\n      });\n      this.updateMask();\n      this.emitEvent('change');\n      this.preMovePoint = currentPoint;\n    }\n  };\n  /**\n   * 更新\n   * @param maskStyle\n   */\n  MultipleMaskBase.prototype.updateMask = function (maskStyle) {\n    var _this = this;\n    this.recordPoints.forEach(function (points, index) {\n      var attrs = deepMix({}, _this.getMaskAttrs(points), maskStyle);\n      _this.maskShapes[index].attr(attrs);\n    });\n  };\n  /**\n   * 大小变化\n   */\n  MultipleMaskBase.prototype.resize = function () {\n    if (this.starting && this.maskShapes.length > 0) {\n      this.recordPointContinue();\n      this.updateMask();\n      this.emitEvent('change');\n    }\n  };\n  /**\n   * 结束移动\n   */\n  MultipleMaskBase.prototype.moveEnd = function () {\n    this.moving = false;\n    this.preMovePoint = null;\n    this.updateShapesCapture(true);\n  };\n  /**\n   * 结束\n   */\n  MultipleMaskBase.prototype.end = function () {\n    this.starting = false;\n    this.emitEvent('end');\n    this.updateShapesCapture(true);\n  };\n  /**\n   * 隐藏\n   */\n  MultipleMaskBase.prototype.hide = function () {\n    if (this.maskShapes.length > 0) {\n      this.maskShapes.forEach(function (maskShape) {\n        return maskShape.hide();\n      });\n      this.emitEvent('hide');\n    }\n  };\n  /**\n   * 清除某个 mask\n   */\n  MultipleMaskBase.prototype.remove = function () {\n    var index = this.getCurMaskShapeIndex();\n    if (index > -1) {\n      // event (x, y) 在的某个 mask 区域内时，清除该 mask\n      this.recordPoints.splice(index, 1);\n      this.maskShapes[index].remove();\n      this.maskShapes.splice(index, 1);\n      this.preMovePoint = null;\n      this.updateShapesCapture(true);\n      this.emitEvent('change');\n    }\n  };\n  /**\n   * 清除全部 mask\n   */\n  MultipleMaskBase.prototype.clearAll = function () {\n    this.recordPointClear();\n    this.maskShapes.forEach(function (maskShape) {\n      return maskShape.remove();\n    });\n    this.maskShapes = [];\n    this.preMovePoint = null;\n  };\n  /**\n   * 清除\n   */\n  MultipleMaskBase.prototype.clear = function () {\n    var index = this.getCurMaskShapeIndex();\n    if (index === -1) {\n      this.recordPointClear();\n      this.maskShapes.forEach(function (maskShape) {\n        return maskShape.remove();\n      });\n      this.maskShapes = [];\n      this.emitEvent('clearAll');\n    } else {\n      this.recordPoints.splice(index, 1);\n      this.maskShapes[index].remove();\n      this.maskShapes.splice(index, 1);\n      this.preMovePoint = null;\n      this.emitEvent('clearSingle');\n    }\n    this.preMovePoint = null;\n  };\n  /**\n   * 销毁\n   */\n  MultipleMaskBase.prototype.destroy = function () {\n    this.clear();\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 获取 mask 节点记录\n   */\n  MultipleMaskBase.prototype.getRecordPoints = function () {\n    var _a;\n    return __spreadArray([], __read((_a = this.recordPoints) !== null && _a !== void 0 ? _a : []), false);\n  };\n  /**\n   * 创建 mask 节点记录\n   */\n  MultipleMaskBase.prototype.recordPointStart = function () {\n    var recordPoints = this.getRecordPoints();\n    var currentPoint = this.getCurrentPoint();\n    this.recordPoints = __spreadArray(__spreadArray([], __read(recordPoints), false), [[currentPoint]], false);\n  };\n  /**\n   * 持续记录 mask 节点\n   */\n  MultipleMaskBase.prototype.recordPointContinue = function () {\n    var recordPoints = this.getRecordPoints();\n    var currentPoint = this.getCurrentPoint();\n    var lastPoints = recordPoints.splice(-1, 1)[0] || [];\n    lastPoints.push(currentPoint);\n    this.recordPoints = __spreadArray(__spreadArray([], __read(recordPoints), false), [lastPoints], false);\n  };\n  /**\n   * 清除 mask 节点 记录\n   */\n  MultipleMaskBase.prototype.recordPointClear = function () {\n    this.recordPoints = [];\n  };\n  /**\n   * 设置 capture\n   * false: 避免创建、resize 时触发事件\n   * true: 正常触发其它事件\n   * @param isCapture\n   */\n  MultipleMaskBase.prototype.updateShapesCapture = function (isCapture) {\n    this.maskShapes.forEach(function (maskShape) {\n      return maskShape.set('capture', isCapture);\n    });\n  };\n  /**\n   *\n   * @returns 获取当前 event (x, y) 所在 maskShape 的 index\n   */\n  MultipleMaskBase.prototype.getCurMaskShapeIndex = function () {\n    var currentPoint = this.getCurrentPoint();\n    return this.maskShapes.findIndex(function (maskShape) {\n      var _a = maskShape.attrs,\n        width = _a.width,\n        height = _a.height,\n        r = _a.r;\n      var isEmpty = width === 0 || height === 0 || r === 0;\n      return !isEmpty && maskShape.isHit(currentPoint.x, currentPoint.y);\n    });\n  };\n  return MultipleMaskBase;\n}(Action);\nexport default MultipleMaskBase;\n//# sourceMappingURL=base.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}