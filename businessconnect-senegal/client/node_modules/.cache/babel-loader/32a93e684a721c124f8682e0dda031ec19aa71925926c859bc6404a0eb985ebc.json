{"ast":null,"code":"import{localStorageService}from'./localStorageService';import{indexedDBService}from'./indexedDBService';// Cache local pour les offres d'emploi\nclass LocalJobStorage{// 24 heures\nstatic saveJobs(jobs){const data={jobs,timestamp:Date.now()};localStorage.setItem(this.KEY,JSON.stringify(data));}static getJobs(){const data=localStorage.getItem(this.KEY);if(!data)return null;const{jobs,timestamp}=JSON.parse(data);if(Date.now()-timestamp>this.CACHE_DURATION){localStorage.removeItem(this.KEY);return null;}return jobs;}static addJob(job){const jobs=this.getJobs()||[];jobs.push(job);this.saveJobs(jobs);}static updateJob(updatedJob){const jobs=this.getJobs()||[];const index=jobs.findIndex(job=>job.id===updatedJob.id);if(index!==-1){jobs[index]=updatedJob;this.saveJobs(jobs);}}static deleteJob(jobId){const jobs=this.getJobs()||[];const filteredJobs=jobs.filter(job=>job.id!==jobId);this.saveJobs(filteredJobs);}}LocalJobStorage.KEY='businessconnect_jobs';LocalJobStorage.CACHE_DURATION=24*60*60*1000;export class JobService{// Gestion des offres d'emploi\nstatic async getJobs(){try{// Essayer d'abord de récupérer depuis IndexedDB\nconst cachedJobs=await indexedDBService.getJobs();if(cachedJobs&&cachedJobs.length>0){return cachedJobs;}// Si pas de cache, essayer l'API\nconst response=await fetch('/api/jobs');if(!response.ok){throw new Error('Erreur réseau');}const jobs=await response.json();// Sauvegarder dans IndexedDB pour le mode hors ligne\nawait indexedDBService.saveJobs(jobs);return jobs;}catch(error){console.warn('Erreur lors de la récupération des offres:',error);// En cas d'erreur, retourner le cache même expiré si disponible\nreturn indexedDBService.getJobs();}}static async getJobById(id){try{// Chercher d'abord dans IndexedDB\nconst cachedJob=await indexedDBService.getJobById(id);if(cachedJob)return cachedJob;// Si pas trouvé dans le cache, essayer l'API\nconst response=await fetch(`/api/jobs/${id}`);if(!response.ok){throw new Error('Erreur réseau');}const job=await response.json();return job;}catch(error){console.warn('Erreur lors de la récupération de l\\'offre:',error);// En cas d'erreur, chercher une dernière fois dans le cache\nreturn indexedDBService.getJobById(id);}}static async searchJobs(query){try{// Essayer d'abord la recherche locale\nreturn await indexedDBService.searchJobs(query);}catch(error){console.warn('Erreur lors de la recherche des offres:',error);return[];}}static async filterJobs(filters){try{// Utiliser le filtrage local\nreturn await indexedDBService.filterJobs(filters);}catch(error){console.warn('Erreur lors du filtrage des offres:',error);return[];}}static async createJob(jobData){try{const response=await fetch('/api/jobs',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(jobData)});if(!response.ok){throw new Error('Erreur lors de la création de l\\'offre');}const newJob=await response.json();// Mettre à jour le cache\nconst jobs=await indexedDBService.getJobs();await indexedDBService.saveJobs([...jobs,newJob]);return newJob;}catch(error){console.error('Erreur lors de la création de l\\'offre:',error);throw error;}}static async updateJob(id,jobData){try{const response=await fetch(`/api/jobs/${id}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(jobData)});if(!response.ok){throw new Error('Erreur lors de la mise à jour de l\\'offre');}const updatedJob=await response.json();// Mettre à jour le cache\nconst jobs=await indexedDBService.getJobs();const updatedJobs=jobs.map(job=>job.id===id?updatedJob:job);await indexedDBService.saveJobs(updatedJobs);return updatedJob;}catch(error){console.error('Erreur lors de la mise à jour de l\\'offre:',error);throw error;}}static async deleteJob(id){try{const response=await fetch(`/api/jobs/${id}`,{method:'DELETE'});if(!response.ok){throw new Error('Erreur lors de la suppression de l\\'offre');}// Mettre à jour le cache\nconst jobs=await indexedDBService.getJobs();const updatedJobs=jobs.filter(job=>job.id!==id);await indexedDBService.saveJobs(updatedJobs);}catch(error){console.error('Erreur lors de la suppression de l\\'offre:',error);throw error;}}// Gestion des candidatures\nasync getUserApplications(userId){return localStorageService.getJobApplications(userId);}async applyToJob(userId,jobId,application){const job=await this.getJobById(jobId);if(!job){throw new Error('Offre d\\'emploi non trouvée');}const newApplication={id:localStorageService.generateId(),userId,jobId,jobTitle:job.title,company:job.company,status:'pending',createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),...application};localStorageService.saveJobApplication(newApplication);return newApplication;}// Gestion des offres sauvegardées\nasync getSavedJobs(userId){return localStorageService.getSavedJobs(userId);}async saveJob(userId,jobId){const job=await this.getJobById(jobId);if(!job){throw new Error('Offre d\\'emploi non trouvée');}const savedJob={id:localStorageService.generateId(),userId,jobId,job,savedAt:new Date().toISOString()};localStorageService.saveJobToFavorites(savedJob);return savedJob;}// Gestion des alertes emploi\nasync getJobAlerts(userId){return localStorageService.getJobAlerts(userId);}async createJobAlert(userId,alert){const newAlert={id:localStorageService.generateId(),userId,keywords:alert.keywords||[],locations:alert.locations||[],jobTypes:alert.jobTypes||[],salary:alert.salary,frequency:alert.frequency||'daily',active:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};localStorageService.saveJobAlert(newAlert);return newAlert;}}export const jobService=new JobService();","map":{"version":3,"names":["localStorageService","indexedDBService","LocalJobStorage","saveJobs","jobs","data","timestamp","Date","now","localStorage","setItem","KEY","JSON","stringify","getJobs","getItem","parse","CACHE_DURATION","removeItem","addJob","job","push","updateJob","updatedJob","index","findIndex","id","deleteJob","jobId","filteredJobs","filter","JobService","cachedJobs","length","response","fetch","ok","Error","json","error","console","warn","getJobById","cachedJob","searchJobs","query","filterJobs","filters","createJob","jobData","method","headers","body","newJob","updatedJobs","map","getUserApplications","userId","getJobApplications","applyToJob","application","newApplication","generateId","jobTitle","title","company","status","createdAt","toISOString","updatedAt","saveJobApplication","getSavedJobs","saveJob","savedJob","savedAt","saveJobToFavorites","getJobAlerts","createJobAlert","alert","newAlert","keywords","locations","jobTypes","salary","frequency","active","saveJobAlert","jobService"],"sources":["C:/Users/babac/OneDrive/Bureau/businessconnect-senegal-main/businessconnect-senegal/client/src/services/jobService.ts"],"sourcesContent":["import { Job, JobApplication, JobAlert, SavedJob } from '../types/job';\r\nimport { localStorageService } from './localStorageService';\r\nimport { indexedDBService } from './indexedDBService';\r\n\r\n// Cache local pour les offres d'emploi\r\nclass LocalJobStorage {\r\n  private static KEY = 'businessconnect_jobs';\r\n  private static CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 heures\r\n\r\n  static saveJobs(jobs: Job[]): void {\r\n    const data = {\r\n      jobs,\r\n      timestamp: Date.now()\r\n    };\r\n    localStorage.setItem(this.KEY, JSON.stringify(data));\r\n  }\r\n\r\n  static getJobs(): Job[] | null {\r\n    const data = localStorage.getItem(this.KEY);\r\n    if (!data) return null;\r\n\r\n    const { jobs, timestamp } = JSON.parse(data);\r\n    if (Date.now() - timestamp > this.CACHE_DURATION) {\r\n      localStorage.removeItem(this.KEY);\r\n      return null;\r\n    }\r\n\r\n    return jobs;\r\n  }\r\n\r\n  static addJob(job: Job): void {\r\n    const jobs = this.getJobs() || [];\r\n    jobs.push(job);\r\n    this.saveJobs(jobs);\r\n  }\r\n\r\n  static updateJob(updatedJob: Job): void {\r\n    const jobs = this.getJobs() || [];\r\n    const index = jobs.findIndex(job => job.id === updatedJob.id);\r\n    if (index !== -1) {\r\n      jobs[index] = updatedJob;\r\n      this.saveJobs(jobs);\r\n    }\r\n  }\r\n\r\n  static deleteJob(jobId: string): void {\r\n    const jobs = this.getJobs() || [];\r\n    const filteredJobs = jobs.filter(job => job.id !== jobId);\r\n    this.saveJobs(filteredJobs);\r\n  }\r\n}\r\n\r\nexport class JobService {\r\n  // Gestion des offres d'emploi\r\n  static async getJobs(): Promise<Job[]> {\r\n    try {\r\n      // Essayer d'abord de récupérer depuis IndexedDB\r\n      const cachedJobs = await indexedDBService.getJobs();\r\n      if (cachedJobs && cachedJobs.length > 0) {\r\n        return cachedJobs;\r\n      }\r\n\r\n      // Si pas de cache, essayer l'API\r\n      const response = await fetch('/api/jobs');\r\n      if (!response.ok) {\r\n        throw new Error('Erreur réseau');\r\n      }\r\n\r\n      const jobs = await response.json();\r\n      // Sauvegarder dans IndexedDB pour le mode hors ligne\r\n      await indexedDBService.saveJobs(jobs);\r\n      return jobs;\r\n    } catch (error) {\r\n      console.warn('Erreur lors de la récupération des offres:', error);\r\n      // En cas d'erreur, retourner le cache même expiré si disponible\r\n      return indexedDBService.getJobs();\r\n    }\r\n  }\r\n\r\n  static async getJobById(id: string): Promise<Job | null> {\r\n    try {\r\n      // Chercher d'abord dans IndexedDB\r\n      const cachedJob = await indexedDBService.getJobById(id);\r\n      if (cachedJob) return cachedJob;\r\n\r\n      // Si pas trouvé dans le cache, essayer l'API\r\n      const response = await fetch(`/api/jobs/${id}`);\r\n      if (!response.ok) {\r\n        throw new Error('Erreur réseau');\r\n      }\r\n\r\n      const job = await response.json();\r\n      return job;\r\n    } catch (error) {\r\n      console.warn('Erreur lors de la récupération de l\\'offre:', error);\r\n      // En cas d'erreur, chercher une dernière fois dans le cache\r\n      return indexedDBService.getJobById(id);\r\n    }\r\n  }\r\n\r\n  static async searchJobs(query: string): Promise<Job[]> {\r\n    try {\r\n      // Essayer d'abord la recherche locale\r\n      return await indexedDBService.searchJobs(query);\r\n    } catch (error) {\r\n      console.warn('Erreur lors de la recherche des offres:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  static async filterJobs(filters: {\r\n    sector?: string;\r\n    jobType?: string;\r\n    location?: string;\r\n  }): Promise<Job[]> {\r\n    try {\r\n      // Utiliser le filtrage local\r\n      return await indexedDBService.filterJobs(filters);\r\n    } catch (error) {\r\n      console.warn('Erreur lors du filtrage des offres:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  static async createJob(jobData: Partial<Job>): Promise<Job> {\r\n    try {\r\n      const response = await fetch('/api/jobs', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(jobData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Erreur lors de la création de l\\'offre');\r\n      }\r\n\r\n      const newJob = await response.json();\r\n      // Mettre à jour le cache\r\n      const jobs = await indexedDBService.getJobs();\r\n      await indexedDBService.saveJobs([...jobs, newJob]);\r\n      return newJob;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création de l\\'offre:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async updateJob(id: string, jobData: Partial<Job>): Promise<Job> {\r\n    try {\r\n      const response = await fetch(`/api/jobs/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(jobData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Erreur lors de la mise à jour de l\\'offre');\r\n      }\r\n\r\n      const updatedJob = await response.json();\r\n      // Mettre à jour le cache\r\n      const jobs = await indexedDBService.getJobs();\r\n      const updatedJobs = jobs.map(job => \r\n        job.id === id ? updatedJob : job\r\n      );\r\n      await indexedDBService.saveJobs(updatedJobs);\r\n      return updatedJob;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour de l\\'offre:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async deleteJob(id: string): Promise<void> {\r\n    try {\r\n      const response = await fetch(`/api/jobs/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Erreur lors de la suppression de l\\'offre');\r\n      }\r\n\r\n      // Mettre à jour le cache\r\n      const jobs = await indexedDBService.getJobs();\r\n      const updatedJobs = jobs.filter(job => job.id !== id);\r\n      await indexedDBService.saveJobs(updatedJobs);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression de l\\'offre:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Gestion des candidatures\r\n  async getUserApplications(userId: string): Promise<JobApplication[]> {\r\n    return localStorageService.getJobApplications(userId);\r\n  }\r\n\r\n  async applyToJob(userId: string, jobId: string, application: Partial<JobApplication>): Promise<JobApplication> {\r\n    const job = await this.getJobById(jobId);\r\n    if (!job) {\r\n      throw new Error('Offre d\\'emploi non trouvée');\r\n    }\r\n\r\n    const newApplication: JobApplication = {\r\n      id: localStorageService.generateId(),\r\n      userId,\r\n      jobId,\r\n      jobTitle: job.title,\r\n      company: job.company,\r\n      status: 'pending',\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      ...application\r\n    };\r\n\r\n    localStorageService.saveJobApplication(newApplication);\r\n    return newApplication;\r\n  }\r\n\r\n  // Gestion des offres sauvegardées\r\n  async getSavedJobs(userId: string): Promise<SavedJob[]> {\r\n    return localStorageService.getSavedJobs(userId);\r\n  }\r\n\r\n  async saveJob(userId: string, jobId: string): Promise<SavedJob> {\r\n    const job = await this.getJobById(jobId);\r\n    if (!job) {\r\n      throw new Error('Offre d\\'emploi non trouvée');\r\n    }\r\n\r\n    const savedJob: SavedJob = {\r\n      id: localStorageService.generateId(),\r\n      userId,\r\n      jobId,\r\n      job,\r\n      savedAt: new Date().toISOString()\r\n    };\r\n\r\n    localStorageService.saveJobToFavorites(savedJob);\r\n    return savedJob;\r\n  }\r\n\r\n  // Gestion des alertes emploi\r\n  async getJobAlerts(userId: string): Promise<JobAlert[]> {\r\n    return localStorageService.getJobAlerts(userId);\r\n  }\r\n\r\n  async createJobAlert(userId: string, alert: Partial<JobAlert>): Promise<JobAlert> {\r\n    const newAlert: JobAlert = {\r\n      id: localStorageService.generateId(),\r\n      userId,\r\n      keywords: alert.keywords || [],\r\n      locations: alert.locations || [],\r\n      jobTypes: alert.jobTypes || [],\r\n      salary: alert.salary,\r\n      frequency: alert.frequency || 'daily',\r\n      active: true,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n\r\n    localStorageService.saveJobAlert(newAlert);\r\n    return newAlert;\r\n  }\r\n}\r\n\r\nexport const jobService = new JobService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}