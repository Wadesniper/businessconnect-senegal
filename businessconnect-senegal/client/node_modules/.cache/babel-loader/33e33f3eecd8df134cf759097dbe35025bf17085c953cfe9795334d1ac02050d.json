{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{message}from'antd';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isLoading,setIsLoading]=useState(true);useEffect(()=>{// Vérifier le token et charger les données utilisateur au démarrage\ncheckAuth();},[]);const checkAuth=async()=>{try{const token=localStorage.getItem('token');if(!token){setIsLoading(false);return;}// Appel API pour vérifier le token et obtenir les données utilisateur\nconst response=await fetch('/api/auth/me',{headers:{'Authorization':`Bearer ${token}`}});if(response.ok){const userData=await response.json();setUser(userData);}else{localStorage.removeItem('token');}}catch(error){console.error('Erreur lors de la vérification de l\\'authentification:',error);localStorage.removeItem('token');}finally{setIsLoading(false);}};const login=async(email,password)=>{try{// Appel API pour la connexion\nconst response=await fetch('/api/auth/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});if(response.ok){const{token,user:userData}=await response.json();localStorage.setItem('token',token);setUser(userData);message.success('Connexion réussie !');}else{throw new Error('Identifiants invalides');}}catch(error){message.error('Erreur lors de la connexion');throw error;}};const logout=()=>{localStorage.removeItem('token');setUser(null);message.success('Déconnexion réussie');};const checkSubscription=async()=>{if(!user)return false;try{const response=await fetch('/api/subscriptions/status',{headers:{'Authorization':`Bearer ${localStorage.getItem('token')}`}});if(response.ok){const{hasActiveSubscription}=await response.json();setUser(prev=>prev?{...prev,hasActiveSubscription}:null);return hasActiveSubscription;}return false;}catch(error){console.error('Erreur lors de la vérification de l\\'abonnement:',error);return false;}};const value={user,isAuthenticated:!!user,isLoading,login,logout,checkSubscription};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth doit être utilisé à l\\'intérieur d\\'un AuthProvider');}return context;};export default useAuth;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}