{"ast":null,"code":"import{api}from'./api';const CURSA_BASE_URL='https://cursa.app';// Liens des domaines de formation\nconst DOMAIN_URLS={informatique:`${CURSA_BASE_URL}/formations/informatique`,marketing:`${CURSA_BASE_URL}/formations/marketing-digital`,gestion:`${CURSA_BASE_URL}/formations/gestion-entreprise`,langues:`${CURSA_BASE_URL}/formations/langues`,softSkills:`${CURSA_BASE_URL}/formations/soft-skills`,design:`${CURSA_BASE_URL}/formations/design-multimedia`,finance:`${CURSA_BASE_URL}/formations/finance-comptabilite`,entrepreneuriat:`${CURSA_BASE_URL}/formations/entrepreneuriat`};class FormationService{static redirectToCursa(domain){const url=DOMAIN_URLS[domain]||CURSA_BASE_URL;window.open(url,'_blank');}static getDomainUrls(){return DOMAIN_URLS;}// Récupérer les formations avec filtres et pagination\nasync getFormations(filters){var _filters$prix,_filters$prix2,_filters$duree,_filters$duree2;const queryParams=new URLSearchParams();if(filters!==null&&filters!==void 0&&filters.categorie)queryParams.append('categorie',filters.categorie);if(filters!==null&&filters!==void 0&&filters.niveau)queryParams.append('niveau',filters.niveau);if(filters!==null&&filters!==void 0&&(_filters$prix=filters.prix)!==null&&_filters$prix!==void 0&&_filters$prix.min)queryParams.append('prixMin',filters.prix.min.toString());if(filters!==null&&filters!==void 0&&(_filters$prix2=filters.prix)!==null&&_filters$prix2!==void 0&&_filters$prix2.max)queryParams.append('prixMax',filters.prix.max.toString());if(filters!==null&&filters!==void 0&&(_filters$duree=filters.duree)!==null&&_filters$duree!==void 0&&_filters$duree.min)queryParams.append('dureeMin',filters.duree.min.toString());if(filters!==null&&filters!==void 0&&(_filters$duree2=filters.duree)!==null&&_filters$duree2!==void 0&&_filters$duree2.max)queryParams.append('dureeMax',filters.duree.max.toString());if(filters!==null&&filters!==void 0&&filters.modalite)queryParams.append('modalite',filters.modalite);if((filters===null||filters===void 0?void 0:filters.certifiant)!==undefined)queryParams.append('certifiant',filters.certifiant.toString());if(filters!==null&&filters!==void 0&&filters.searchTerm)queryParams.append('search',filters.searchTerm);if(filters!==null&&filters!==void 0&&filters.tri)queryParams.append('tri',filters.tri);if(filters!==null&&filters!==void 0&&filters.page)queryParams.append('page',filters.page.toString());if(filters!==null&&filters!==void 0&&filters.limit)queryParams.append('limit',filters.limit.toString());const response=await api.get(`/formations?${queryParams.toString()}`);return response.data;}// Récupérer une formation par son ID\nasync getFormationById(id){const response=await api.get(`/formations/${id}`);return response.data;}// Récupérer les catégories de formation\nasync getCategories(){const response=await api.get('/formations/categories');return response.data;}// S'inscrire à une formation\nasync inscrireFormation(formationId){const response=await api.post(`/formations/${formationId}/inscription`);return response.data;}// Annuler une inscription\nasync annulerInscription(formationId){await api.delete(`/formations/${formationId}/inscription`);}// Mettre à jour la progression\nasync updateProgression(formationId,progression){const response=await api.patch(`/formations/${formationId}/progression`,{progression});return response.data;}// Obtenir les formations d'un utilisateur\nasync getMesFormations(){const response=await api.get('/formations/mes-formations');return response.data;}// Ajouter un avis sur une formation\nasync ajouterAvis(formationId,note,commentaire){await api.post(`/formations/${formationId}/avis`,{note,commentaire});}// Obtenir les avis d'une formation\nasync getAvis(formationId){let page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;let limit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10;const response=await api.get(`/formations/${formationId}/avis?page=${page}&limit=${limit}`);return response.data;}// Obtenir les prochaines sessions d'une formation\nasync getProchaineSessions(formationId){const response=await api.get(`/formations/${formationId}/sessions`);return response.data;}// S'inscrire à une session spécifique\nasync inscrireSession(formationId,sessionId){const response=await api.post(`/formations/${formationId}/sessions/${sessionId}/inscription`);return response.data;}// Télécharger le certificat\nasync telechargerCertificat(formationId){const response=await api.get(`/formations/${formationId}/certificat`,{responseType:'blob'});return response.data;}// Vérifier la validité d'un certificat\nasync verifierCertificat(certificatId){const response=await api.get(`/formations/certificats/${certificatId}/verification`);return response.data;}}export default FormationService;","map":{"version":3,"names":["api","CURSA_BASE_URL","DOMAIN_URLS","informatique","marketing","gestion","langues","softSkills","design","finance","entrepreneuriat","FormationService","redirectToCursa","domain","url","window","open","getDomainUrls","getFormations","filters","_filters$prix","_filters$prix2","_filters$duree","_filters$duree2","queryParams","URLSearchParams","categorie","append","niveau","prix","min","toString","max","duree","modalite","certifiant","undefined","searchTerm","tri","page","limit","response","get","data","getFormationById","id","getCategories","inscrireFormation","formationId","post","annulerInscription","delete","updateProgression","progression","patch","getMesFormations","ajouterAvis","note","commentaire","getAvis","arguments","length","getProchaineSessions","inscrireSession","sessionId","telechargerCertificat","responseType","verifierCertificat","certificatId"],"sources":["C:/Users/babac/OneDrive/Bureau/businessconnect-senegal-main/businessconnect-senegal/client/src/services/formationService.ts"],"sourcesContent":["import { DomainType } from '../types/formation.types';\r\nimport { api } from './api';\r\nimport { Formation, FormationFilters, InscriptionFormation, Categorie } from '../pages/formations/types';\r\n\r\nconst CURSA_BASE_URL = 'https://cursa.app';\r\n\r\n// Liens des domaines de formation\r\nconst DOMAIN_URLS = {\r\n  informatique: `${CURSA_BASE_URL}/formations/informatique`,\r\n  marketing: `${CURSA_BASE_URL}/formations/marketing-digital`,\r\n  gestion: `${CURSA_BASE_URL}/formations/gestion-entreprise`,\r\n  langues: `${CURSA_BASE_URL}/formations/langues`,\r\n  softSkills: `${CURSA_BASE_URL}/formations/soft-skills`,\r\n  design: `${CURSA_BASE_URL}/formations/design-multimedia`,\r\n  finance: `${CURSA_BASE_URL}/formations/finance-comptabilite`,\r\n  entrepreneuriat: `${CURSA_BASE_URL}/formations/entrepreneuriat`\r\n} as const;\r\n\r\nclass FormationService {\r\n  static redirectToCursa(domain: DomainType): void {\r\n    const url = DOMAIN_URLS[domain] || CURSA_BASE_URL;\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  static getDomainUrls(): typeof DOMAIN_URLS {\r\n    return DOMAIN_URLS;\r\n  }\r\n\r\n  // Récupérer les formations avec filtres et pagination\r\n  async getFormations(filters?: FormationFilters): Promise<{\r\n    formations: Formation[];\r\n    total: number;\r\n    page: number;\r\n    totalPages: number;\r\n  }> {\r\n    const queryParams = new URLSearchParams();\r\n    if (filters?.categorie) queryParams.append('categorie', filters.categorie);\r\n    if (filters?.niveau) queryParams.append('niveau', filters.niveau);\r\n    if (filters?.prix?.min) queryParams.append('prixMin', filters.prix.min.toString());\r\n    if (filters?.prix?.max) queryParams.append('prixMax', filters.prix.max.toString());\r\n    if (filters?.duree?.min) queryParams.append('dureeMin', filters.duree.min.toString());\r\n    if (filters?.duree?.max) queryParams.append('dureeMax', filters.duree.max.toString());\r\n    if (filters?.modalite) queryParams.append('modalite', filters.modalite);\r\n    if (filters?.certifiant !== undefined) queryParams.append('certifiant', filters.certifiant.toString());\r\n    if (filters?.searchTerm) queryParams.append('search', filters.searchTerm);\r\n    if (filters?.tri) queryParams.append('tri', filters.tri);\r\n    if (filters?.page) queryParams.append('page', filters.page.toString());\r\n    if (filters?.limit) queryParams.append('limit', filters.limit.toString());\r\n\r\n    const response = await api.get(`/formations?${queryParams.toString()}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Récupérer une formation par son ID\r\n  async getFormationById(id: string): Promise<Formation> {\r\n    const response = await api.get(`/formations/${id}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Récupérer les catégories de formation\r\n  async getCategories(): Promise<Categorie[]> {\r\n    const response = await api.get('/formations/categories');\r\n    return response.data;\r\n  }\r\n\r\n  // S'inscrire à une formation\r\n  async inscrireFormation(formationId: string): Promise<InscriptionFormation> {\r\n    const response = await api.post(`/formations/${formationId}/inscription`);\r\n    return response.data;\r\n  }\r\n\r\n  // Annuler une inscription\r\n  async annulerInscription(formationId: string): Promise<void> {\r\n    await api.delete(`/formations/${formationId}/inscription`);\r\n  }\r\n\r\n  // Mettre à jour la progression\r\n  async updateProgression(formationId: string, progression: number): Promise<InscriptionFormation> {\r\n    const response = await api.patch(`/formations/${formationId}/progression`, { progression });\r\n    return response.data;\r\n  }\r\n\r\n  // Obtenir les formations d'un utilisateur\r\n  async getMesFormations(): Promise<InscriptionFormation[]> {\r\n    const response = await api.get('/formations/mes-formations');\r\n    return response.data;\r\n  }\r\n\r\n  // Ajouter un avis sur une formation\r\n  async ajouterAvis(formationId: string, note: number, commentaire: string): Promise<void> {\r\n    await api.post(`/formations/${formationId}/avis`, { note, commentaire });\r\n  }\r\n\r\n  // Obtenir les avis d'une formation\r\n  async getAvis(formationId: string, page = 1, limit = 10): Promise<{\r\n    avis: Formation['avis'];\r\n    total: number;\r\n    page: number;\r\n    totalPages: number;\r\n  }> {\r\n    const response = await api.get(`/formations/${formationId}/avis?page=${page}&limit=${limit}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Obtenir les prochaines sessions d'une formation\r\n  async getProchaineSessions(formationId: string): Promise<Formation['prochaineSessions']> {\r\n    const response = await api.get(`/formations/${formationId}/sessions`);\r\n    return response.data;\r\n  }\r\n\r\n  // S'inscrire à une session spécifique\r\n  async inscrireSession(formationId: string, sessionId: string): Promise<InscriptionFormation> {\r\n    const response = await api.post(`/formations/${formationId}/sessions/${sessionId}/inscription`);\r\n    return response.data;\r\n  }\r\n\r\n  // Télécharger le certificat\r\n  async telechargerCertificat(formationId: string): Promise<Blob> {\r\n    const response = await api.get(`/formations/${formationId}/certificat`, {\r\n      responseType: 'blob'\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // Vérifier la validité d'un certificat\r\n  async verifierCertificat(certificatId: string): Promise<{\r\n    valide: boolean;\r\n    formation: Formation;\r\n    dateObtention: string;\r\n  }> {\r\n    const response = await api.get(`/formations/certificats/${certificatId}/verification`);\r\n    return response.data;\r\n  }\r\n}\r\n\r\nexport default FormationService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}