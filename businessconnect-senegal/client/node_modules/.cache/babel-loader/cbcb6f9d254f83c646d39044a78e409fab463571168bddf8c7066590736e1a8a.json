{"ast":null,"code":"import axios from'axios';import{discussionsData}from'../data/forumData';import{message}from'antd';import{authService}from'./authService';const BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:3000/api';export const api=axios.create({baseURL:BASE_URL,headers:{'Content-Type':'application/json'}});// Intercepteur pour ajouter le token d'authentification\napi.interceptors.request.use(config=>{const token=authService.getToken();if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// Intercepteur pour gérer les erreurs\napi.interceptors.response.use(response=>response,async error=>{if(error.response){// Gérer les erreurs d'authentification\nif(error.response.status===401){authService.removeToken();message.error('Session expirée. Veuillez vous reconnecter.');window.location.href='/auth/login';return Promise.reject(error);}// Gérer les erreurs de validation\nif(error.response.status===422){const validationErrors=error.response.data.errors;if(validationErrors){Object.values(validationErrors).forEach(err=>{message.error(err);});}return Promise.reject(error);}// Gérer les erreurs serveur\nif(error.response.status>=500){message.error('Une erreur serveur est survenue. Veuillez réessayer plus tard.');return Promise.reject(error);}// Gérer les autres erreurs\nconst errorMessage=error.response.data.message||'Une erreur est survenue';message.error(errorMessage);}else if(error.request){// La requête a été faite mais pas de réponse reçue\nmessage.error('Impossible de contacter le serveur. Veuillez vérifier votre connexion.');}else{// Une erreur s'est produite lors de la configuration de la requête\nmessage.error('Une erreur est survenue lors de la configuration de la requête.');}return Promise.reject(error);});// Mock des appels API pour le forum en attendant l'implémentation backend\nconst forumApi={getDiscussions:()=>{return Promise.resolve({data:discussionsData});},getDiscussion:id=>{const discussion=discussionsData.find(d=>d.id===id);if(discussion){return Promise.resolve({data:discussion});}return Promise.reject(new Error('Discussion non trouvée'));},createDiscussion:data=>{const newDiscussion={id:String(discussionsData.length+1),...data,createdAt:new Date().toISOString(),repliesCount:0,likesCount:0,replies:[]};discussionsData.unshift(newDiscussion);return Promise.resolve({data:newDiscussion});},addReply:(discussionId,data)=>{const discussion=discussionsData.find(d=>d.id===discussionId);if(discussion){const newReply={id:`${discussionId}-${discussion.replies.length+1}`,...data,createdAt:new Date().toISOString(),likesCount:0};discussion.replies.push(newReply);discussion.repliesCount+=1;return Promise.resolve({data:newReply});}return Promise.reject(new Error('Discussion non trouvée'));},likeDiscussion:discussionId=>{const discussion=discussionsData.find(d=>d.id===discussionId);if(discussion){discussion.likesCount+=1;return Promise.resolve({data:{likesCount:discussion.likesCount}});}return Promise.reject(new Error('Discussion non trouvée'));}};// Configuration des intercepteurs pour le mock du forum\napi.interceptors.request.use(config=>{var _config$url;if((_config$url=config.url)!==null&&_config$url!==void 0&&_config$url.startsWith('/forum')){const mockResponse=async()=>{var _config$method;const method=(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toLowerCase();const url=config.url;if(!url){throw new Error('URL non définie');}if(method==='get'){if(url==='/forum/discussions'){const{data}=await forumApi.getDiscussions();return{data,status:200,statusText:'OK',headers:{},config};}else if(url.match(/\\/forum\\/discussions\\/\\w+$/)){const id=url.split('/').pop()||'';const{data}=await forumApi.getDiscussion(id);return{data,status:200,statusText:'OK',headers:{},config};}}else if(method==='post'){if(url==='/forum/discussions'){const{data}=await forumApi.createDiscussion(config.data);return{data,status:201,statusText:'Created',headers:{},config};}else if(url.match(/\\/forum\\/discussions\\/\\w+\\/replies$/)){const id=url.split('/')[3];const{data}=await forumApi.addReply(id,config.data);return{data,status:201,statusText:'Created',headers:{},config};}else if(url.match(/\\/forum\\/discussions\\/\\w+\\/like$/)){const id=url.split('/')[3];const{data}=await forumApi.likeDiscussion(id);return{data,status:200,statusText:'OK',headers:{},config};}}throw new Error('Route non trouvée');};return{...config,adapter:mockResponse};}return config;});","map":{"version":3,"names":["axios","discussionsData","message","authService","BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","getToken","Authorization","error","Promise","reject","response","status","removeToken","window","location","href","validationErrors","data","errors","Object","values","forEach","err","errorMessage","forumApi","getDiscussions","resolve","getDiscussion","id","discussion","find","d","Error","createDiscussion","newDiscussion","String","length","createdAt","Date","toISOString","repliesCount","likesCount","replies","unshift","addReply","discussionId","newReply","push","likeDiscussion","_config$url","url","startsWith","mockResponse","_config$method","method","toLowerCase","statusText","match","split","pop","adapter"],"sources":["C:/Users/babac/OneDrive/Bureau/businessconnect-senegal-main/businessconnect-senegal/client/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport { discussionsData, Discussion as ForumDiscussion, Reply as ForumReply } from '../data/forumData';\r\nimport { message } from 'antd';\r\nimport { authService } from './authService';\r\n\r\ninterface DiscussionData {\r\n  title: string;\r\n  content: string;\r\n  category: string;\r\n  author: {\r\n    name: string;\r\n    avatar?: string;\r\n  };\r\n  tags?: string[];\r\n}\r\n\r\ninterface ReplyData {\r\n  content: string;\r\n  author: {\r\n    name: string;\r\n    avatar?: string;\r\n  };\r\n}\r\n\r\ninterface Discussion extends DiscussionData {\r\n  id: string;\r\n  createdAt: string;\r\n  repliesCount: number;\r\n  likesCount: number;\r\n  replies: Reply[];\r\n}\r\n\r\ninterface Reply extends ReplyData {\r\n  id: string;\r\n  createdAt: string;\r\n  likesCount: number;\r\n}\r\n\r\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\nexport const api = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Intercepteur pour ajouter le token d'authentification\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = authService.getToken();\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Intercepteur pour gérer les erreurs\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    if (error.response) {\r\n      // Gérer les erreurs d'authentification\r\n      if (error.response.status === 401) {\r\n        authService.removeToken();\r\n        message.error('Session expirée. Veuillez vous reconnecter.');\r\n        window.location.href = '/auth/login';\r\n        return Promise.reject(error);\r\n      }\r\n\r\n      // Gérer les erreurs de validation\r\n      if (error.response.status === 422) {\r\n        const validationErrors = error.response.data.errors;\r\n        if (validationErrors) {\r\n          Object.values(validationErrors).forEach((err: any) => {\r\n            message.error(err);\r\n          });\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n\r\n      // Gérer les erreurs serveur\r\n      if (error.response.status >= 500) {\r\n        message.error('Une erreur serveur est survenue. Veuillez réessayer plus tard.');\r\n        return Promise.reject(error);\r\n      }\r\n\r\n      // Gérer les autres erreurs\r\n      const errorMessage = error.response.data.message || 'Une erreur est survenue';\r\n      message.error(errorMessage);\r\n    } else if (error.request) {\r\n      // La requête a été faite mais pas de réponse reçue\r\n      message.error('Impossible de contacter le serveur. Veuillez vérifier votre connexion.');\r\n    } else {\r\n      // Une erreur s'est produite lors de la configuration de la requête\r\n      message.error('Une erreur est survenue lors de la configuration de la requête.');\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Mock des appels API pour le forum en attendant l'implémentation backend\r\nconst forumApi = {\r\n  getDiscussions: (): Promise<{ data: ForumDiscussion[] }> => {\r\n    return Promise.resolve({ data: discussionsData });\r\n  },\r\n\r\n  getDiscussion: (id: string): Promise<{ data: ForumDiscussion }> => {\r\n    const discussion = discussionsData.find(d => d.id === id);\r\n    if (discussion) {\r\n      return Promise.resolve({ data: discussion });\r\n    }\r\n    return Promise.reject(new Error('Discussion non trouvée'));\r\n  },\r\n\r\n  createDiscussion: (data: DiscussionData): Promise<{ data: ForumDiscussion }> => {\r\n    const newDiscussion: ForumDiscussion = {\r\n      id: String(discussionsData.length + 1),\r\n      ...data,\r\n      createdAt: new Date().toISOString(),\r\n      repliesCount: 0,\r\n      likesCount: 0,\r\n      replies: []\r\n    };\r\n    discussionsData.unshift(newDiscussion);\r\n    return Promise.resolve({ data: newDiscussion });\r\n  },\r\n\r\n  addReply: (discussionId: string, data: ReplyData): Promise<{ data: ForumReply }> => {\r\n    const discussion = discussionsData.find(d => d.id === discussionId);\r\n    if (discussion) {\r\n      const newReply: ForumReply = {\r\n        id: `${discussionId}-${discussion.replies.length + 1}`,\r\n        ...data,\r\n        createdAt: new Date().toISOString(),\r\n        likesCount: 0\r\n      };\r\n      discussion.replies.push(newReply);\r\n      discussion.repliesCount += 1;\r\n      return Promise.resolve({ data: newReply });\r\n    }\r\n    return Promise.reject(new Error('Discussion non trouvée'));\r\n  },\r\n\r\n  likeDiscussion: (discussionId: string): Promise<{ data: { likesCount: number } }> => {\r\n    const discussion = discussionsData.find(d => d.id === discussionId);\r\n    if (discussion) {\r\n      discussion.likesCount += 1;\r\n      return Promise.resolve({ data: { likesCount: discussion.likesCount } });\r\n    }\r\n    return Promise.reject(new Error('Discussion non trouvée'));\r\n  }\r\n};\r\n\r\n// Configuration des intercepteurs pour le mock du forum\r\napi.interceptors.request.use(config => {\r\n  if (config.url?.startsWith('/forum')) {\r\n    const mockResponse = async (): Promise<AxiosResponse> => {\r\n      const method = config.method?.toLowerCase();\r\n      const url = config.url;\r\n\r\n      if (!url) {\r\n        throw new Error('URL non définie');\r\n      }\r\n\r\n      if (method === 'get') {\r\n        if (url === '/forum/discussions') {\r\n          const { data } = await forumApi.getDiscussions();\r\n          return {\r\n            data,\r\n            status: 200,\r\n            statusText: 'OK',\r\n            headers: {},\r\n            config\r\n          };\r\n        } else if (url.match(/\\/forum\\/discussions\\/\\w+$/)) {\r\n          const id = url.split('/').pop() || '';\r\n          const { data } = await forumApi.getDiscussion(id);\r\n          return {\r\n            data,\r\n            status: 200,\r\n            statusText: 'OK',\r\n            headers: {},\r\n            config\r\n          };\r\n        }\r\n      } else if (method === 'post') {\r\n        if (url === '/forum/discussions') {\r\n          const { data } = await forumApi.createDiscussion(config.data);\r\n          return {\r\n            data,\r\n            status: 201,\r\n            statusText: 'Created',\r\n            headers: {},\r\n            config\r\n          };\r\n        } else if (url.match(/\\/forum\\/discussions\\/\\w+\\/replies$/)) {\r\n          const id = url.split('/')[3];\r\n          const { data } = await forumApi.addReply(id, config.data);\r\n          return {\r\n            data,\r\n            status: 201,\r\n            statusText: 'Created',\r\n            headers: {},\r\n            config\r\n          };\r\n        } else if (url.match(/\\/forum\\/discussions\\/\\w+\\/like$/)) {\r\n          const id = url.split('/')[3];\r\n          const { data } = await forumApi.likeDiscussion(id);\r\n          return {\r\n            data,\r\n            status: 200,\r\n            statusText: 'OK',\r\n            headers: {},\r\n            config\r\n          };\r\n        }\r\n      }\r\n\r\n      throw new Error('Route non trouvée');\r\n    };\r\n\r\n    return {\r\n      ...config,\r\n      adapter: mockResponse\r\n    };\r\n  }\r\n  return config;\r\n}); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}