{"ast":null,"code":"import{useState,useEffect}from'react';import{useAuth}from'./useAuth';import{api}from'../services/api';export const useSubscription=()=>{const{user}=useAuth();const[subscription,setSubscription]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[hasActiveSubscription,setHasActiveSubscription]=useState(false);const fetchSubscription=async()=>{if(!(user!==null&&user!==void 0&&user.id))return;setLoading(true);setError(null);try{const response=await fetch(`/api/subscriptions/${user.id}`);if(!response.ok){throw new Error('Erreur lors de la récupération de l\\'abonnement');}const data=await response.json();setSubscription(data);}catch(err){setError(err instanceof Error?err.message:'Une erreur est survenue');}finally{setLoading(false);}};const initiateSubscription=async type=>{if(!(user!==null&&user!==void 0&&user.id)){throw new Error('Utilisateur non connecté');}const response=await fetch('/api/subscriptions/initiate',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userId:user.id,subscriptionType:type})});if(!response.ok){throw new Error('Erreur lors de l\\'initiation du paiement');}return response.json();};const checkSubscriptionStatus=async()=>{if(!(user!==null&&user!==void 0&&user.id)||!subscription)return;try{const response=await fetch(`/api/subscriptions/${user.id}/status`);if(!response.ok){throw new Error('Erreur lors de la vérification du statut');}const updatedSubscription=await response.json();setSubscription(updatedSubscription);}catch(err){setError(err instanceof Error?err.message:'Une erreur est survenue');}};const refreshSubscription=()=>{fetchSubscription();};useEffect(()=>{if(user!==null&&user!==void 0&&user.id){fetchSubscription();}},[user===null||user===void 0?void 0:user.id]);useEffect(()=>{const checkSubscription=async()=>{if(!user){setHasActiveSubscription(false);setLoading(false);return;}try{const response=await api.get('/users/subscription/status');setHasActiveSubscription(response.data.hasActiveSubscription);}catch(error){console.error('Erreur lors de la vérification de l\\'abonnement:',error);setHasActiveSubscription(false);}finally{setLoading(false);}};checkSubscription();},[user]);return{subscription,loading,error,initiateSubscription,checkSubscriptionStatus,refreshSubscription,hasActiveSubscription};};","map":{"version":3,"names":["useState","useEffect","useAuth","api","useSubscription","user","subscription","setSubscription","loading","setLoading","error","setError","hasActiveSubscription","setHasActiveSubscription","fetchSubscription","id","response","fetch","ok","Error","data","json","err","message","initiateSubscription","type","method","headers","body","JSON","stringify","userId","subscriptionType","checkSubscriptionStatus","updatedSubscription","refreshSubscription","checkSubscription","get","console"],"sources":["C:/Users/babac/OneDrive/Bureau/businessconnect-senegal-main/businessconnect-senegal/client/src/hooks/useSubscription.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useAuth } from './useAuth';\r\nimport { Subscription, SubscriptionType, PaymentInitiation } from '../types/subscription';\r\nimport { api } from '../services/api';\r\n\r\nexport const useSubscription = () => {\r\n  const { user } = useAuth();\r\n  const [subscription, setSubscription] = useState<Subscription | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [hasActiveSubscription, setHasActiveSubscription] = useState(false);\r\n\r\n  const fetchSubscription = async () => {\r\n    if (!user?.id) return;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await fetch(`/api/subscriptions/${user.id}`);\r\n      if (!response.ok) {\r\n        throw new Error('Erreur lors de la récupération de l\\'abonnement');\r\n      }\r\n      const data = await response.json();\r\n      setSubscription(data);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Une erreur est survenue');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const initiateSubscription = async (type: SubscriptionType): Promise<PaymentInitiation> => {\r\n    if (!user?.id) {\r\n      throw new Error('Utilisateur non connecté');\r\n    }\r\n\r\n    const response = await fetch('/api/subscriptions/initiate', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        userId: user.id,\r\n        subscriptionType: type\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Erreur lors de l\\'initiation du paiement');\r\n    }\r\n\r\n    return response.json();\r\n  };\r\n\r\n  const checkSubscriptionStatus = async () => {\r\n    if (!user?.id || !subscription) return;\r\n    \r\n    try {\r\n      const response = await fetch(`/api/subscriptions/${user.id}/status`);\r\n      if (!response.ok) {\r\n        throw new Error('Erreur lors de la vérification du statut');\r\n      }\r\n      const updatedSubscription = await response.json();\r\n      setSubscription(updatedSubscription);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Une erreur est survenue');\r\n    }\r\n  };\r\n\r\n  const refreshSubscription = () => {\r\n    fetchSubscription();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user?.id) {\r\n      fetchSubscription();\r\n    }\r\n  }, [user?.id]);\r\n\r\n  useEffect(() => {\r\n    const checkSubscription = async () => {\r\n      if (!user) {\r\n        setHasActiveSubscription(false);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await api.get('/users/subscription/status');\r\n        setHasActiveSubscription(response.data.hasActiveSubscription);\r\n      } catch (error) {\r\n        console.error('Erreur lors de la vérification de l\\'abonnement:', error);\r\n        setHasActiveSubscription(false);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkSubscription();\r\n  }, [user]);\r\n\r\n  return {\r\n    subscription,\r\n    loading,\r\n    error,\r\n    initiateSubscription,\r\n    checkSubscriptionStatus,\r\n    refreshSubscription,\r\n    hasActiveSubscription\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}