{"ast":null,"code":"import{useState,useEffect}from'react';import{useAuth}from'./useAuth';import{api}from'../services/api';export const useSubscription=()=>{const{user}=useAuth();const[subscription,setSubscription]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[hasActiveSubscription,setHasActiveSubscription]=useState(false);const fetchSubscription=async()=>{if(!(user!==null&&user!==void 0&&user.id))return;setLoading(true);setError(null);try{const response=await fetch(`/api/subscriptions/${user.id}`);if(!response.ok){throw new Error('Erreur lors de la récupération de l\\'abonnement');}const data=await response.json();setSubscription(data);}catch(err){setError(err instanceof Error?err.message:'Une erreur est survenue');}finally{setLoading(false);}};const initiateSubscription=async type=>{if(!(user!==null&&user!==void 0&&user.id)){throw new Error('Utilisateur non connecté');}const response=await fetch('/api/subscriptions/initiate',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userId:user.id,subscriptionType:type})});if(!response.ok){throw new Error('Erreur lors de l\\'initiation du paiement');}return response.json();};const checkSubscriptionStatus=async()=>{if(!(user!==null&&user!==void 0&&user.id)||!subscription)return;try{const response=await fetch(`/api/subscriptions/${user.id}/status`);if(!response.ok){throw new Error('Erreur lors de la vérification du statut');}const updatedSubscription=await response.json();setSubscription(updatedSubscription);}catch(err){setError(err instanceof Error?err.message:'Une erreur est survenue');}};const refreshSubscription=()=>{fetchSubscription();};useEffect(()=>{if(user!==null&&user!==void 0&&user.id){fetchSubscription();}},[user===null||user===void 0?void 0:user.id]);useEffect(()=>{const checkSubscription=async()=>{if(!user){setHasActiveSubscription(false);setLoading(false);return;}try{const response=await api.get('/users/subscription/status');setHasActiveSubscription(response.data.hasActiveSubscription);}catch(error){console.error('Erreur lors de la vérification de l\\'abonnement:',error);setHasActiveSubscription(false);}finally{setLoading(false);}};checkSubscription();},[user]);return{subscription,loading,error,initiateSubscription,checkSubscriptionStatus,refreshSubscription,hasActiveSubscription};};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}